name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Deploy CloudFormation stack
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --query "Vpcs[0].VpcId" --output text)
        aws cloudformation deploy \
          --template-file cloudformation.json \
          --stack-name ai-starter-main-$(date +%s) \
          --parameter-overrides AppName=ai-starter-main VpcId=$VPC_ID	\
          --no-fail-on-empty-changeset \
          --capabilities CAPABILITY_NAMED_IAM

    - name: ⏱️ Wait for installation ...
      id: wait
      run: |
        NEWEST_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ai-starter-main" --query "Reservations[*].Instances[*].[InstanceId,LaunchTime]" --output text | sort -k2 | tail -n 1 | awk '{print $1}')
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $NEWEST_INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

        echo "Waiting on HTTP 200 response from $PUBLIC_IP..."
        while [[ $(curl -s -o /dev/null -w "%{http_code}" "$PUBLIC_IP") != "200" ]]; do sleep 5; done

        echo "NEWEST_INSTANCE_ID=$NEWEST_INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Terminate older EC2 instances
      env:
        NEWEST_INSTANCE_ID: ${{ steps.wait.outputs.NEWEST_INSTANCE_ID }}
      run: |
        # Get the instance IDs of running instances
        INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ai-starter-main" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
        for INSTANCE_ID in $INSTANCE_IDS; do
          if [ "$INSTANCE_ID" != "$NEWEST_INSTANCE_ID" ]; then
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
          fi
        done

    - name: ✅ Done!
      env:
        PUBLIC_IP: ${{ steps.wait.outputs.PUBLIC_IP }}
      run: |
        echo "Deployed to $PUBLIC_IP"
